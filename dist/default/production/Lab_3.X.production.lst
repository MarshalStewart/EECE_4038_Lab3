

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue Feb 22 17:54:38 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F886
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12  0000                     
    13                           ; Version 2.40
    14                           ; Generated 17/11/2021 GMT
    15                           ; 
    16                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F886 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0009                     	;# 
    57  000A                     	;# 
    58  000B                     	;# 
    59  000C                     	;# 
    60  000D                     	;# 
    61  000E                     	;# 
    62  000E                     	;# 
    63  000F                     	;# 
    64  0010                     	;# 
    65  0011                     	;# 
    66  0012                     	;# 
    67  0013                     	;# 
    68  0014                     	;# 
    69  0015                     	;# 
    70  0015                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001B                     	;# 
    78  001C                     	;# 
    79  001D                     	;# 
    80  001E                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  0087                     	;# 
    86  0089                     	;# 
    87  008C                     	;# 
    88  008D                     	;# 
    89  008E                     	;# 
    90  008F                     	;# 
    91  0090                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0093                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0095                     	;# 
    99  0096                     	;# 
   100  0097                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009A                     	;# 
   104  009B                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  0105                     	;# 
   110  0107                     	;# 
   111  0108                     	;# 
   112  0109                     	;# 
   113  010C                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  010F                     	;# 
   118  0185                     	;# 
   119  0187                     	;# 
   120  0188                     	;# 
   121  0189                     	;# 
   122  018C                     	;# 
   123  018D                     	;# 
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  008F                     	;# 
   167  0090                     	;# 
   168  0091                     	;# 
   169  0092                     	;# 
   170  0093                     	;# 
   171  0093                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0095                     	;# 
   175  0096                     	;# 
   176  0097                     	;# 
   177  0098                     	;# 
   178  0099                     	;# 
   179  009A                     	;# 
   180  009B                     	;# 
   181  009C                     	;# 
   182  009D                     	;# 
   183  009E                     	;# 
   184  009F                     	;# 
   185  0105                     	;# 
   186  0107                     	;# 
   187  0108                     	;# 
   188  0109                     	;# 
   189  010C                     	;# 
   190  010C                     	;# 
   191  010D                     	;# 
   192  010E                     	;# 
   193  010F                     	;# 
   194  0185                     	;# 
   195  0187                     	;# 
   196  0188                     	;# 
   197  0189                     	;# 
   198  018C                     	;# 
   199  018D                     	;# 
   200  001E                     _ADRESH	set	30
   201  000C                     _PIR1bits	set	12
   202  001F                     _ADCON0bits	set	31
   203  0006                     _PORTB	set	6
   204  0005                     _PORTA	set	5
   205  0033                     _RB3	set	51
   206  0032                     _RB2	set	50
   207  0031                     _RB1	set	49
   208  0030                     _RB0	set	48
   209  009E                     _ADRESL	set	158
   210  008C                     _PIE1bits	set	140
   211  009F                     _ADCON1bits	set	159
   212  0085                     _TRISA	set	133
   213  0086                     _TRISB	set	134
   214  0189                     _ANSELH	set	393
   215  0188                     _ANSELbits	set	392
   216  0188                     _ANSEL	set	392
   217                           
   218                           	psect	cinit
   219  07FA                     start_initialization:	
   220                           ; #config settings
   221                           
   222  07FA                     __initialization:
   223                           
   224                           ; Clear objects allocated to COMMON
   225  07FA  01F6               	clrf	__pbssCOMMON& (0+127)
   226  07FB  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   227  07FC                     end_of_initialization:	
   228                           ;End of C runtime variable initialization code
   229                           
   230  07FC                     __end_of__initialization:
   231  07FC  0183               	clrf	3
   232  07FD  120A  118A  2FA6   	ljmp	_main	;jump to C main() function
   233                           
   234                           	psect	bssCOMMON
   235  0076                     __pbssCOMMON:
   236  0076                     _result:
   237  0076                     	ds	2
   238                           
   239                           	psect	cstackCOMMON
   240  0070                     __pcstackCOMMON:
   241  0070                     ?_exercise_msb:
   242  0070                     ??_exercise_msb:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_main:	
   246                           ; 1 bytes @ 0x0
   247                           
   248                           
   249                           ; 1 bytes @ 0x0
   250  0070                     	ds	2
   251  0072                     exercise_msb@tmp:
   252                           
   253                           ; 2 bytes @ 0x2
   254  0072                     	ds	2
   255  0074                     ??_main:
   256                           
   257                           ; 1 bytes @ 0x4
   258  0074                     	ds	2
   259                           
   260                           	psect	maintext
   261  07A6                     __pmaintext:	
   262 ;;
   263 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   264 ;;
   265 ;; *************** function _main *****************
   266 ;; Defined at:
   267 ;;		line 71 in file "main.c"
   268 ;; Parameters:    Size  Location     Type
   269 ;;		None
   270 ;; Auto vars:     Size  Location     Type
   271 ;;		None
   272 ;; Return value:  Size  Location     Type
   273 ;;                  1    wreg      void 
   274 ;; Registers used:
   275 ;;		wreg, status,2, status,0, pclath, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : B00/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   281 ;;      Params:         0       0       0       0       0
   282 ;;      Locals:         0       0       0       0       0
   283 ;;      Temps:          2       0       0       0       0
   284 ;;      Totals:         2       0       0       0       0
   285 ;;Total ram usage:        2 bytes
   286 ;; Hardware stack levels required when called: 1
   287 ;; This function calls:
   288 ;;		_exercise_msb
   289 ;; This function is called by:
   290 ;;		Startup code after reset
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294  07A6                     _main:	
   295                           ;psect for function _main
   296                           
   297  07A6                     l677:	
   298                           ;incstack = 0
   299                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   300                           
   301                           
   302                           ;main.c: 77:     TRISB = 0x0;
   303  07A6  1683               	bsf	3,5	;RP0=1, select bank1
   304  07A7  1303               	bcf	3,6	;RP1=0, select bank1
   305  07A8  0186               	clrf	6	;volatile
   306  07A9                     l679:
   307                           
   308                           ;main.c: 78:     TRISA = 0xff;
   309  07A9  30FF               	movlw	255
   310  07AA  0085               	movwf	5	;volatile
   311  07AB                     l681:
   312                           
   313                           ;main.c: 81:     PORTA = 0x0;
   314  07AB  1283               	bcf	3,5	;RP0=0, select bank0
   315  07AC  1303               	bcf	3,6	;RP1=0, select bank0
   316  07AD  0185               	clrf	5	;volatile
   317  07AE                     l683:
   318                           
   319                           ;main.c: 82:     PORTB = 0x0;
   320  07AE  0186               	clrf	6	;volatile
   321  07AF                     l685:
   322                           
   323                           ;main.c: 85:     ANSEL = 0x0;
   324  07AF  1683               	bsf	3,5	;RP0=1, select bank3
   325  07B0  1703               	bsf	3,6	;RP1=1, select bank3
   326  07B1  0188               	clrf	8	;volatile
   327  07B2                     l687:
   328                           
   329                           ;main.c: 86:     ANSELbits.ANS0 = 1;
   330  07B2  1408               	bsf	8,0	;volatile
   331  07B3                     l689:
   332                           
   333                           ;main.c: 89:     ANSELH = 0x0;
   334  07B3  0189               	clrf	9	;volatile
   335  07B4                     l691:
   336                           
   337                           ;main.c: 92:     ADCON0bits.ADCS = 0b11;
   338  07B4  30C0               	movlw	192
   339  07B5  1283               	bcf	3,5	;RP0=0, select bank0
   340  07B6  1303               	bcf	3,6	;RP1=0, select bank0
   341  07B7  049F               	iorwf	31,f	;volatile
   342  07B8                     l693:
   343                           
   344                           ;main.c: 93:     ADCON0bits.CHS = 0b0000;
   345  07B8  30C3               	movlw	-61
   346  07B9  059F               	andwf	31,f	;volatile
   347  07BA                     l695:
   348                           
   349                           ;main.c: 96:     ADCON1bits.VCFG1 = 0;
   350  07BA  1683               	bsf	3,5	;RP0=1, select bank1
   351  07BB  1303               	bcf	3,6	;RP1=0, select bank1
   352  07BC  129F               	bcf	31,5	;volatile
   353  07BD                     l697:
   354                           
   355                           ;main.c: 97:     ADCON1bits.VCFG0 = 0;
   356  07BD  121F               	bcf	31,4	;volatile
   357  07BE                     l699:
   358                           
   359                           ;main.c: 98:     ADCON1bits.ADFM = 1;
   360  07BE  179F               	bsf	31,7	;volatile
   361  07BF                     l701:
   362                           
   363                           ;main.c: 101:     PIR1bits.ADIF = 0;
   364  07BF  1283               	bcf	3,5	;RP0=0, select bank0
   365  07C0  1303               	bcf	3,6	;RP1=0, select bank0
   366  07C1  130C               	bcf	12,6	;volatile
   367  07C2                     l703:
   368                           
   369                           ;main.c: 104:     PIE1bits.ADIE = 1;
   370  07C2  1683               	bsf	3,5	;RP0=1, select bank1
   371  07C3  1303               	bcf	3,6	;RP1=0, select bank1
   372  07C4  170C               	bsf	12,6	;volatile
   373  07C5                     l705:
   374                           
   375                           ;main.c: 106:     ADCON0bits.ADON = 1;
   376  07C5  1283               	bcf	3,5	;RP0=0, select bank0
   377  07C6  1303               	bcf	3,6	;RP1=0, select bank0
   378  07C7  141F               	bsf	31,0	;volatile
   379  07C8                     l707:
   380                           
   381                           ;main.c: 111:         ADCON0bits.GO = 1;
   382  07C8  149F               	bsf	31,1	;volatile
   383  07C9                     l56:	
   384                           ;main.c: 113:         while(ADCON0bits.GO == 1);
   385                           
   386  07C9  189F               	btfsc	31,1	;volatile
   387  07CA  2FCC               	goto	u101
   388  07CB  2FCD               	goto	u100
   389  07CC                     u101:
   390  07CC  2FC9               	goto	l56
   391  07CD                     u100:
   392  07CD                     l709:
   393                           
   394                           ;main.c: 116:         result = 0x0000;
   395  07CD  01F6               	clrf	_result
   396  07CE  01F7               	clrf	_result+1
   397  07CF                     l711:
   398                           
   399                           ;main.c: 117:         result = ADRESH;
   400  07CF  081E               	movf	30,w	;volatile
   401  07D0  00F4               	movwf	??_main
   402  07D1  01F5               	clrf	??_main+1
   403  07D2  0874               	movf	??_main,w
   404  07D3  00F6               	movwf	_result
   405  07D4  0875               	movf	??_main+1,w
   406  07D5  00F7               	movwf	_result+1
   407  07D6                     l713:
   408                           
   409                           ;main.c: 118:         result = result << 8;
   410  07D6  0876               	movf	_result,w
   411  07D7  00F5               	movwf	??_main+1
   412  07D8  01F4               	clrf	??_main
   413  07D9  0874               	movf	??_main,w
   414  07DA  00F6               	movwf	_result
   415  07DB  0875               	movf	??_main+1,w
   416  07DC  00F7               	movwf	_result+1
   417  07DD                     l715:
   418                           
   419                           ;main.c: 119:         result = result | ADRESL;
   420  07DD  0876               	movf	_result,w
   421  07DE  1683               	bsf	3,5	;RP0=1, select bank1
   422  07DF  1303               	bcf	3,6	;RP1=0, select bank1
   423  07E0  041E               	iorwf	30,w	;volatile
   424  07E1  00F4               	movwf	??_main
   425  07E2  0877               	movf	_result+1,w
   426  07E3  00F5               	movwf	??_main+1
   427  07E4  0874               	movf	??_main,w
   428  07E5  00F6               	movwf	_result
   429  07E6  0875               	movf	??_main+1,w
   430  07E7  00F7               	movwf	_result+1
   431  07E8                     l717:
   432                           
   433                           ;main.c: 122:         RB0 = 0;
   434  07E8  1283               	bcf	3,5	;RP0=0, select bank0
   435  07E9  1303               	bcf	3,6	;RP1=0, select bank0
   436  07EA  1006               	bcf	6,0	;volatile
   437  07EB                     l719:
   438                           
   439                           ;main.c: 123:         RB1 = 0;
   440  07EB  1086               	bcf	6,1	;volatile
   441  07EC                     l721:
   442                           
   443                           ;main.c: 124:         RB2 = 0;
   444  07EC  1106               	bcf	6,2	;volatile
   445  07ED                     l723:
   446                           
   447                           ;main.c: 125:         RB3 = 0;
   448  07ED  1186               	bcf	6,3	;volatile
   449  07EE                     l725:
   450                           
   451                           ;main.c: 128:         exercise_msb();
   452  07EE  120A  118A  277A  120A  118A  	fcall	_exercise_msb
   453  07F3                     l727:
   454                           
   455                           ;main.c: 131:         PIR1bits.ADIF = 0;
   456  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   457  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   458  07F5  130C               	bcf	12,6	;volatile
   459  07F6  2FC8               	goto	l707
   460  07F7  120A  118A  2800   	ljmp	start
   461  07FA                     __end_of_main:
   462                           
   463                           	psect	text1
   464  077A                     __ptext1:	
   465 ;; *************** function _exercise_msb *****************
   466 ;; Defined at:
   467 ;;		line 35 in file "main.c"
   468 ;; Parameters:    Size  Location     Type
   469 ;;		None
   470 ;; Auto vars:     Size  Location     Type
   471 ;;  tmp             2    2[COMMON] unsigned short 
   472 ;; Return value:  Size  Location     Type
   473 ;;                  1    wreg      void 
   474 ;; Registers used:
   475 ;;		wreg, status,2, status,0
   476 ;; Tracked objects:
   477 ;;		On entry : 0/0
   478 ;;		On exit  : 0/0
   479 ;;		Unchanged: 0/0
   480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   481 ;;      Params:         0       0       0       0       0
   482 ;;      Locals:         2       0       0       0       0
   483 ;;      Temps:          2       0       0       0       0
   484 ;;      Totals:         4       0       0       0       0
   485 ;;Total ram usage:        4 bytes
   486 ;; Hardware stack levels used: 1
   487 ;; This function calls:
   488 ;;		Nothing
   489 ;; This function is called by:
   490 ;;		_main
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494  077A                     _exercise_msb:	
   495                           ;psect for function _exercise_msb
   496                           
   497  077A                     l653:	
   498                           ;incstack = 0
   499                           ; Regs used in _exercise_msb: [wreg+status,2+status,0]
   500                           
   501                           
   502                           ;main.c: 37:     unsigned short tmp = result >> 6;
   503  077A  0877               	movf	_result+1,w
   504  077B  00F1               	movwf	??_exercise_msb+1
   505  077C  0876               	movf	_result,w
   506  077D  00F0               	movwf	??_exercise_msb
   507  077E  3006               	movlw	6
   508  077F                     u15:
   509  077F  1003               	clrc
   510  0780  0CF1               	rrf	??_exercise_msb+1,f
   511  0781  0CF0               	rrf	??_exercise_msb,f
   512  0782  3EFF               	addlw	-1
   513  0783  1D03               	skipz
   514  0784  2F7F               	goto	u15
   515  0785  0870               	movf	??_exercise_msb,w
   516  0786  00F2               	movwf	exercise_msb@tmp
   517  0787  0871               	movf	??_exercise_msb+1,w
   518  0788  00F3               	movwf	exercise_msb@tmp+1
   519  0789                     l655:
   520                           
   521                           ;main.c: 39:     if (tmp & 1){
   522  0789  1C72               	btfss	exercise_msb@tmp,0
   523  078A  2F8C               	goto	u21
   524  078B  2F8D               	goto	u20
   525  078C                     u21:
   526  078C  2F90               	goto	l39
   527  078D                     u20:
   528  078D                     l657:
   529                           
   530                           ;main.c: 40:         RB0 = 1;
   531  078D  1283               	bcf	3,5	;RP0=0, select bank0
   532  078E  1303               	bcf	3,6	;RP1=0, select bank0
   533  078F  1406               	bsf	6,0	;volatile
   534  0790                     l39:	
   535                           ;main.c: 41:     }
   536                           
   537                           
   538                           ;main.c: 42:     if (tmp & 2) {
   539  0790  1CF2               	btfss	exercise_msb@tmp,1
   540  0791  2F93               	goto	u31
   541  0792  2F94               	goto	u30
   542  0793                     u31:
   543  0793  2F97               	goto	l40
   544  0794                     u30:
   545  0794                     l659:
   546                           
   547                           ;main.c: 43:         RB1 = 1;
   548  0794  1283               	bcf	3,5	;RP0=0, select bank0
   549  0795  1303               	bcf	3,6	;RP1=0, select bank0
   550  0796  1486               	bsf	6,1	;volatile
   551  0797                     l40:	
   552                           ;main.c: 44:     }
   553                           
   554                           
   555                           ;main.c: 45:     if (tmp & 4) {
   556  0797  1D72               	btfss	exercise_msb@tmp,2
   557  0798  2F9A               	goto	u41
   558  0799  2F9B               	goto	u40
   559  079A                     u41:
   560  079A  2F9E               	goto	l41
   561  079B                     u40:
   562  079B                     l661:
   563                           
   564                           ;main.c: 46:         RB2 = 1;
   565  079B  1283               	bcf	3,5	;RP0=0, select bank0
   566  079C  1303               	bcf	3,6	;RP1=0, select bank0
   567  079D  1506               	bsf	6,2	;volatile
   568  079E                     l41:	
   569                           ;main.c: 47:     }
   570                           
   571                           
   572                           ;main.c: 48:     if (tmp & 8) {
   573  079E  1DF2               	btfss	exercise_msb@tmp,3
   574  079F  2FA1               	goto	u51
   575  07A0  2FA2               	goto	u50
   576  07A1                     u51:
   577  07A1  2FA5               	goto	l43
   578  07A2                     u50:
   579  07A2                     l663:
   580                           
   581                           ;main.c: 49:         RB3 = 1;
   582  07A2  1283               	bcf	3,5	;RP0=0, select bank0
   583  07A3  1303               	bcf	3,6	;RP1=0, select bank0
   584  07A4  1586               	bsf	6,3	;volatile
   585  07A5                     l43:
   586  07A5  0008               	return
   587  07A6                     __end_of_exercise_msb:
   588  007E                     btemp	set	126	;btemp
   589  007E                     wtemp0	set	126
   590                           
   591                           	psect	idloc
   592                           
   593                           ;Config register IDLOC0 @ 0x2000
   594                           ;	unspecified, using default values
   595  2000                     	org	8192
   596  2000  3FFF               	dw	16383
   597                           
   598                           ;Config register IDLOC1 @ 0x2001
   599                           ;	unspecified, using default values
   600  2001                     	org	8193
   601  2001  3FFF               	dw	16383
   602                           
   603                           ;Config register IDLOC2 @ 0x2002
   604                           ;	unspecified, using default values
   605  2002                     	org	8194
   606  2002  3FFF               	dw	16383
   607                           
   608                           ;Config register IDLOC3 @ 0x2003
   609                           ;	unspecified, using default values
   610  2003                     	org	8195
   611  2003  3FFF               	dw	16383
   612                           
   613                           	psect	config
   614                           
   615                           ;Config register CONFIG1 @ 0x2007
   616                           ;	Oscillator Selection bits
   617                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   618                           ;	Watchdog Timer Enable bit
   619                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
   620                           ;	Power-up Timer Enable bit
   621                           ;	PWRTE = OFF, PWRT disabled
   622                           ;	RE3/MCLR pin function select bit
   623                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
   624                           ;	Code Protection bit
   625                           ;	CP = OFF, Program memory code protection is disabled
   626                           ;	Data Code Protection bit
   627                           ;	CPD = OFF, Data memory code protection is disabled
   628                           ;	Brown Out Reset Selection bits
   629                           ;	BOREN = ON, BOR enabled
   630                           ;	Internal External Switchover bit
   631                           ;	IESO = ON, Internal/External Switchover mode is enabled
   632                           ;	Fail-Safe Clock Monitor Enabled bit
   633                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
   634                           ;	Low Voltage Programming Enable bit
   635                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
   636                           ;	In-Circuit Debugger Mode bit
   637                           ;	DEBUG = 0x1, unprogrammed default
   638  2007                     	org	8199
   639  2007  2FD2               	dw	12242
   640                           
   641                           ;Config register CONFIG2 @ 0x2008
   642                           ;	Brown-out Reset Selection bit
   643                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
   644                           ;	Flash Program Memory Self Write Enable bits
   645                           ;	WRT = OFF, Write protection off
   646  2008                     	org	8200
   647  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_exercise_msb

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0      60
                                              4 COMMON     2     2      0
                       _exercise_msb
 ---------------------------------------------------------------------------------
 (1) _exercise_msb                                         4     4      0      60
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _exercise_msb

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       8      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue Feb 22 17:54:38 2022

                     l40 0797                       l41 079E                       l43 07A5  
                     l39 0790                       l56 07C9                       u20 078D  
                     u21 078C                       u30 0794                       u31 0793  
                     u15 077F                       u40 079B                       u41 079A  
                     u50 07A2                       u51 07A1                      l701 07BF  
                    l711 07CF                      l703 07C2                      l721 07EC  
                    l713 07D6                      l705 07C5                      l723 07ED  
                    l715 07DD                      l707 07C8                      l661 079B  
                    l653 077A                      l725 07EE                      l717 07E8  
                    l709 07CD                      l663 07A2                      l655 0789  
                    l727 07F3                      l719 07EB                      l657 078D  
                    l681 07AB                      l659 0794                      l691 07B4  
                    l683 07AE                      l693 07B8                      l685 07AF  
                    l677 07A6                      l695 07BA                      l687 07B2  
                    l679 07A9                      l697 07BD                      l689 07B3  
                    l699 07BE                      _RB0 0030                      _RB1 0031  
                    _RB2 0032                      _RB3 0033                      u100 07CD  
                    u101 07CC                     _main 07A6                     btemp 007E  
                   start 0000                    ?_main 0070                    _ANSEL 0188  
                  _PORTA 0005                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    status 0003                    wtemp0 007E  
        __initialization 07FA             __end_of_main 07FA                   ??_main 0074  
                 _ADRESH 001E                   _ADRESL 009E                   _ANSELH 0189  
          ?_exercise_msb 0070                   _result 0076           ??_exercise_msb 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070               __pmaintext 07A6  
              _ANSELbits 0188                  __ptext1 077A     __end_of_exercise_msb 07A6  
   end_of_initialization 07FC      start_initialization 07FA          exercise_msb@tmp 0072  
            __pbssCOMMON 0076                ___latbits 0002             _exercise_msb 077A  
               _PIE1bits 008C                 _PIR1bits 000C               _ADCON0bits 001F  
             _ADCON1bits 009F  
